--[[

	--------------------------------------------------------------------

	Version 1.0

	Aqwam's Roblox Matrix Library (AR-MatrixL)

	Author: Aqwam Harish Aiman
	
	YouTube: https://www.youtube.com/channel/UCUrwoxv5dufEmbGsxyEUPZw
	
	LinkedIn: https://www.linkedin.com/in/aqwam-harish-aiman/
	
	--------------------------------------------------------------------
	
	DO NOT SELL, RENT, DISTRIBUTE THIS LIBRARY
	
	DO NOT SELL, RENT, DISTRIBUTE MODIFIED VERSION OF THIS LIBRARY
	
	DO NOT CLAIM OWNERSHIP OF THIS LIBRARY
	
	GIVE CREDIT AND SOURCE WHEN USING THIS LIBRARY IF YOUR USAGE FALLS UNDER ONE OF THESE CATEGORIES:
	
		- USED AS A VIDEO OR ARTICLE CONTENT
		- USED AS COMMERCIAL USE 
	
	--------------------------------------------------------------------

--]]

local MatrixOperation = require(script.MatrixOperation)
local MatrixBroadcast = require(script.MatrixBroadcast)
local MatrixDotProduct = require(script.MatrixDotProduct)
local MatrixConcatenate = require(script.MatrixConcatenate)

local AqwamRobloxMatrixLibrary = {}

local function convertToMatrixIfScalar(value)

	local isNotScalar

	isNotScalar = pcall(function()

		local testForScalar = value[1][1]

	end)
	
	if not isNotScalar then
		
		return {{value}}
		
	else
		
		return value
		
	end
	
end

local function generateArgumentErrorString(matrices, firstMatrixIndex, secondMatrixIndex)
	
	local text1 = "Argument " .. secondMatrixIndex .. " and " .. firstMatrixIndex .. " are incompatible! "

	local text2 = "(" ..  #matrices[secondMatrixIndex] .. ", " .. #matrices[secondMatrixIndex][1] .. ") and " .. "(" ..  #matrices[firstMatrixIndex] .. ", " .. #matrices[firstMatrixIndex][1] .. ")"
	
	local text = text1 .. text2
	
	return text
	
end

local function broadcastAndCalculate(operation, ...)
	
	local matrices = {...}
	
	local firstMatrixIndex = #matrices
	local secondMatrixIndex = firstMatrixIndex - 1 

	local matrix1 = convertToMatrixIfScalar(matrices[firstMatrixIndex])

	local matrix2 = convertToMatrixIfScalar(matrices[secondMatrixIndex])
	
	matrix1, matrix2 = MatrixBroadcast:matrixBroadcast(matrix1, matrix2)

	local result 
	
	local success = pcall(function()

		result = MatrixOperation:matrixOperation(operation, matrix1, matrix2)

	end)

	if (not success) then
		
		local text = generateArgumentErrorString(matrices, firstMatrixIndex, secondMatrixIndex)

		error(text)

	end

	if ( (secondMatrixIndex - 1) > 0) then

		return broadcastAndCalculate(operation, select(secondMatrixIndex - 1, ...), result)

	else

		return result

	end
	
end

function AqwamRobloxMatrixLibrary:add(...)
	
	return broadcastAndCalculate('+', ...)
	
end

function AqwamRobloxMatrixLibrary:subtract(...)

	return broadcastAndCalculate('-', ...)

end

function AqwamRobloxMatrixLibrary:multiply(...)

	return broadcastAndCalculate('*', ...)

end

function AqwamRobloxMatrixLibrary:divide(...)

	return broadcastAndCalculate('/', ...)

end

function AqwamRobloxMatrixLibrary:logarithm(...)

	return broadcastAndCalculate('log', ...)

end

function AqwamRobloxMatrixLibrary:exponent(...)

	return broadcastAndCalculate('exp', ...)

end

function AqwamRobloxMatrixLibrary:dotProduct(...)

	local matrices = {...}
	
	local firstMatrixIndex = #matrices
	local secondMatrixIndex = firstMatrixIndex - 1 

	local result
	
	local success = pcall(function()
		
		result = MatrixDotProduct:dotProduct(matrices[secondMatrixIndex], matrices[firstMatrixIndex])
		
	end)
	
	if (not success) then
		
		local text = generateArgumentErrorString(matrices, firstMatrixIndex, secondMatrixIndex)

		error(text)
		
	end
	
	if ( (secondMatrixIndex - 1) > 0) then
		
		return AqwamRobloxMatrixLibrary:dotProduct(select(secondMatrixIndex - 1, ...), result)

	else
		
		return result

	end

end

function AqwamRobloxMatrixLibrary:sum(matrix)
	
	local result = 0
	
	local matrixRows = #matrix
	local matrixColumns = #matrix[1]
	
	for row = 1, matrixRows, 1 do
		
		for column = 1, matrixColumns, 1 do
			
			result += matrix[row][column]
			
		end
		
	end
	
	return result
	
end

function AqwamRobloxMatrixLibrary:createIdentityMatrix(numberOfRowsAndColumns)
	
	local result = {}
	
	for row = 1, numberOfRowsAndColumns, 1 do
		
		result[row] = {}
		
		for column = 1, numberOfRowsAndColumns, 1 do
				
			if (row == column) then
					
				result[row][column] = 1
					
			else
					
				result[row][column] = 0
					
			end
				
		end
		
	end
	
	return result
	
end

function AqwamRobloxMatrixLibrary:createMatrix(numberOfRows, numberOfColumns, allNumberValues)
	
	allNumberValues = allNumberValues or 0
	
	local result = {}

	for row = 1, numberOfRows, 1 do

		result[row] = {}

		for column = 1, numberOfColumns, 1 do

			result[row][column] = allNumberValues

		end	

	end

	return result
	
end

function AqwamRobloxMatrixLibrary:createRandomMatrix(numberOfRows, numberOfColumns)

	local result = {}

	for row = 1, numberOfRows, 1 do

		result[row] = {}

		for column = 1, numberOfColumns, 1 do

			result[row][column] = Random.new():NextInteger(-100000, 100000)

		end	

	end

	return result

end

function AqwamRobloxMatrixLibrary:createRandomNormalMatrix(numberOfRows, numberOfColumns)

	local result = {}

	for row = 1, numberOfRows, 1 do

		result[row] = {}

		for column = 1, numberOfColumns, 1 do
			
			result[row][column] = Random.new():NextNumber()

		end	

	end

	return result

end

function AqwamRobloxMatrixLibrary:getSize(matrix)
	
	local numberOfRows = #matrix
	local numberOfColumns = #matrix[1]
	
	return {numberOfRows, numberOfColumns}
	
end


function AqwamRobloxMatrixLibrary:transpose(matrix)
	
	local currentRowVector
	
	local numberOfRows = #matrix
	local numberOfColumns = #matrix[1]
	
	local result = AqwamRobloxMatrixLibrary:createMatrix(numberOfColumns, numberOfRows)
	
	for row = 1, numberOfRows, 1 do
		
		currentRowVector = matrix[row]
		
		for column = 1, #currentRowVector, 1 do
			
			result[column][row] = currentRowVector[column]
			
		end
		
	end
	
	return result
	
end

function AqwamRobloxMatrixLibrary:verticalSum(matrix)
	
	local numberOfRows = #matrix
	local numberOfColumns = #matrix[1]

	local result = AqwamRobloxMatrixLibrary:createMatrix(1, numberOfColumns)


	for row = 1, numberOfRows, 1 do
		
		for column = 1, numberOfColumns, 1 do

			result[1][column] += matrix[row][column]

		end	

	end

	return result

end

function AqwamRobloxMatrixLibrary:horizontalSum(matrix)

	local numberOfRows = #matrix
	local numberOfColumns = #matrix[1]

	local result = AqwamRobloxMatrixLibrary:createMatrix(numberOfRows, 1)

	for row = 1, numberOfRows, 1 do

		for column = 1, numberOfColumns, 1 do

			result[row][1] += matrix[row][column]

		end	

	end

	return result

end

function AqwamRobloxMatrixLibrary:printMatrix(matrix)
	
	local numberOfRows = #matrix
	local numberOfColumns = #matrix[1]
	
	local text = "\n\n"
	
	for row = 1, numberOfRows, 1 do
		
		text = text .. "{"

		for column = 1, numberOfColumns, 1 do

			text = text .. "\t" .. matrix[row][column]
			
		end
		
		text = text .. "\t}\n"

	end
	
	text = text .. "\n"
	
	print(text)
	
end

function AqwamRobloxMatrixLibrary:horizontalConcatenate(...)

	local matrices = {...}

	local firstMatrixIndex = #matrices
	local secondMatrixIndex = firstMatrixIndex - 1 

	local result

	local success = pcall(function()

		result = MatrixConcatenate:horizontalConcatenate(matrices[secondMatrixIndex], matrices[firstMatrixIndex])

	end)

	if (not success) then

		local text = generateArgumentErrorString(matrices, firstMatrixIndex, secondMatrixIndex)

		error(text)

	end

	if ( (secondMatrixIndex - 1) > 0) then

		return AqwamRobloxMatrixLibrary:horizontalConcatenate(select(secondMatrixIndex - 1, ...), result)

	else

		return result

	end
	
end

function AqwamRobloxMatrixLibrary:verticalConcatenate(...)

	local matrices = {...}

	local firstMatrixIndex = #matrices
	local secondMatrixIndex = firstMatrixIndex - 1 

	local result

	local success = pcall(function()

		result = MatrixConcatenate:verticalConcatenate(matrices[secondMatrixIndex], matrices[firstMatrixIndex])

	end)

	if (not success) then

		local text = generateArgumentErrorString(matrices, firstMatrixIndex, secondMatrixIndex)

		error(text)

	end

	if ( (secondMatrixIndex - 1) > 0) then

		return AqwamRobloxMatrixLibrary:verticalConcatenate(select(secondMatrixIndex - 1, ...), result)

	else

		return result

	end

end

return AqwamRobloxMatrixLibrary
